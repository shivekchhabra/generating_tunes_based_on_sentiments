""" This module generates notes for a midi file using the
    trained neural network """
import pickle
import numpy
import os
from music21 import instrument, note, stream, chord
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import BatchNormalization as BatchNorm
from keras.layers import Activation


# load notes stored during the training phase

def get_notes(type):
    """ Generate a piano midi file """
    with open('data/notes-' + 'thriller_songs', 'rb') as filepath:
        total_notes = pickle.load(filepath)
    if (type == 'happy_songs'):
        with open('data/notes-' + type, 'rb') as filepath:
            notes = pickle.load(filepath)
        return notes, total_notes
    elif (type == 'sad_songs'):
        with open('data/notes-' + 'happy_songs', 'rb') as filepath:
            hap = pickle.load(filepath)
        with open('data/notes-' + type, 'rb') as filepath:
            notes = pickle.load(filepath)
        return notes[len(hap):], total_notes
    elif (type == 'thriller_songs'):
        with open('data/notes-' + 'sad_songs', 'rb') as filepath:
            notes = pickle.load(filepath)
        return total_notes[len(notes):], total_notes


# Create input sequence required for prediction

def create_io(inputs, emotion, note_map, notes):
    sample_len = 100
    emotion_map = {'happy': [0, 0, 1], 'sad': [0, 1, 0], 'thriller': [1, 0, 0]}
    for i in range(0, len(notes) - sample_len):
        inp_li = notes[i:i + sample_len]
        sample_list = []
        for j in inp_li:
            li = []
            li.append(note_map[j])
            for k in emotion_map[emotion]:
                li.append(k)
            sample_list.append(li)
        inputs.append(sample_list)
        # out_note=notes[i + sample_len]
        # print(out_note)

        # Either use the commented code or the default one, if experimenting with below commented code comment out last line
        # li=[]
        # li.append(note_map[out_note])
        # for j in emotion_map['emotion']:
        #     li.append(j)
        # outputs.append(li)

        # outputs.append(note_map[out_note])


# Model to predict, same architecture as the train phase

def create_network(network_input, n_vocab):
    model = Sequential()
    model.add(LSTM(
        512,
        input_shape=(network_input.shape[1], network_input.shape[2]),
        recurrent_dropout=0.3,
        return_sequences=True
    ))
    model.add(LSTM(512, return_sequences=True, recurrent_dropout=0.3, ))
    model.add(LSTM(512))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(256))
    model.add(Activation('relu'))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(n_vocab))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

    # Load the weights to each node
    model.load_weights(os.getcwd()+os.sep+'final_generate_model.hdf5')

    return model


# Function which generates 500 notes from a random sample for an input sequence to the model    

def generate_notes(model, network_input, pitchnames, n_vocab, emotion):
    emotion_map = {'happy': [0, 0, 1], 'sad': [0, 1, 0], 'thriller': [1, 0, 0]}
    start = numpy.random.randint(0, len(network_input) - 1)

    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    for note_index in range(500):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 4))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = numpy.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)
        li = []
        li.append(index)
        for i in emotion_map[emotion]:
            li.append(i)
        pattern.append(li)
        pattern = pattern[1:len(pattern)]

    return prediction_output


# convert prediction back to notes and save as midi file

def create_midi(prediction_output):
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
            # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    return midi_stream
    # midi_stream.write('midi', fp='test_output.mid')


if __name__ == '__main__':
    sample_len = 100
    notes, total_notes = get_notes('thriller_songs')
    notes_set = sorted(set(total_notes))
    note_map = {}
    temp = 0
    for i in notes_set:
        note_map[i] = temp
        temp += 1
    inputs = []
    create_io(inputs, 'sad', note_map, notes)
    # create_io(inputs,'sad',note_map,total_notes[len(notes):])
    norm_inputs = numpy.reshape(inputs, (len(inputs), sample_len, 4))
    norm_inputs = norm_inputs / float(len(notes_set))
    # print(inputs.shape)
    # print(len(notes_set))
    model = create_network(norm_inputs, len(notes_set))
    # output=generate_notes(model,inputs,note_map,len(notes_set),'sad')
    output = generate_notes(model, inputs, note_map, len(notes_set), 'sad')
    op = create_midi(output)
    op.write('midi', fp='test_output.mid')
